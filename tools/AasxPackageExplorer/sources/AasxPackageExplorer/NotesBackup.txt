Tree View with Columns

		<local:TreeListView Grid.Row="1" Grid.Column="2" AllowsColumnReorder="True" x:Name="tv1" BorderThickness="1" HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch">
            <!--Create an item template to specify the ItemsSource-->
            <local:TreeListView.ItemTemplate>
                <HierarchicalDataTemplate ItemsSource="{Binding Members}" />
                <!--<DataTemplate/>-->
            </local:TreeListView.ItemTemplate>
            <local:TreeListView.Columns>
                <!--Create the first column containing the expand button and name information (id short, semantic id, short name, preferred name)-->
                <GridViewColumn Header="Submodel(Element) Names" Width="250">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <!--The Expander Button (can be used in any column (typically the first one))-->
                                <local:TreeListViewExpander/>
                                <!--Display the name of the DataElement-->
                                <TextBlock Text="{Binding Name, diag:PresentationTraceSources.TraceLevel=High}"/>
                            </StackPanel>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <!--Create a second column containing unit, qualifiers, mime types ..-->
                <GridViewColumn Header="Value Info" Width="100">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding ValueInfo}" HorizontalAlignment="Left"/>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <!--Create a third column containing the brush of the material.-->
                <GridViewColumn Header="Value" Width="200">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Value}" HorizontalAlignment="Left"/>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
            </local:TreeListView.Columns>
        </local:TreeListView>

Adding Items

        public class TreeViewLineGeneric
        {
            public ObservableCollection<TreeViewLineGeneric> Members { get; set; }
            public string Name { get; set; }
            public string Value { get; set; }
            public string ValueInfo { get; set; }

            public TreeViewLineGeneric(string name, string valueInfo, string value)
            {
                this.Name = name;
                this.ValueInfo = valueInfo;
                this.Value = value;
                this.Members = new ObservableCollection<TreeViewLineGeneric>();
            }

        }

                /*
                TreeViewItem ceo = new TreeViewItem() { Header = "CEO" };
                TreeViewItem manager1 = new TreeViewItem() { Header = "Manager1" };
                TreeViewItem manager2 = new TreeViewItem() { Header = "Manager2" };
                TreeViewItem person1 = new TreeViewItem() { Header = "person1" };
                TreeViewItem person2 = new TreeViewItem() { Header = "person2" };
                manager1.Items.Add(person1);
                manager2.Items.Add(person2);
                ceo.Items.Add(manager1);
                ceo.Items.Add(manager2);
                ceo.IsExpanded = true;
                tv1.Items.Add(ceo);
                */

                var its = new List<TreeViewLineGeneric>();
                var v = new TreeViewLineGeneric("N1", "VI1", "V1");
                v.Members.Add(new TreeViewLineGeneric("N2", "VI2", "V2"));
                v.Members.Add(new TreeViewLineGeneric("N3", "VI3", "V3"));
                its.Add(v);

                tv1.ItemsSource = its;



CefSharp Nuget Package

Background:
  CefSharp is a .Net wrapping library for CEF (Chromium Embedded Framework) https://bitbucket.org/chromiumembedded/cef
  CEF is a C/C++ library that allows developers to embed the HTML content rendering strengths of Google's Chrome open source WebKit engine (Chromium).

Post Installation:
  - Read the release notes for your version https://github.com/cefsharp/CefSharp/releases (Any known issues will be listed here)
  - Read the `Need to know/limitations` section of the General usage guide (https://github.com/cefsharp/CefSharp/wiki/General-Usage#need-to-knowlimitations)
  - For `x86` or x64` set your solution target architecture to `x86` or `x64`, just changing the project is currently not enough (See https://msdn.microsoft.com/en-us/library/ms185328.aspx#Anchor_0 for details).
  - `AnyCPU` target is supported though requires additional code/changes see https://github.com/cefsharp/CefSharp/issues/1714 for details.
  - After installing the `Nuget` package we recommend closing Visual Studio completely and then reopening (This ensures your references show up and you have full intellisense).
  - Check your output `\bin` directory to make sure the appropriate references have been copied.
  - Build fails even though packages are installed. Short term rebuild again and everything should be find. Long term we recommend reading http://www.xavierdecoster.com/migrate-away-from-msbuild-based-nuget-package-restore
  - Minimal designer support was added in version `57.0.0 for both `WinForms` and `WPF`. For older versions there is no designer support (designer will throw an exception).
  - Add an app.manifest to your exe if you don't already have one, it's required for Windows 10 compatability, HighDPI support and tooltips. The example projects in the main repository contain example app.manifest files.
  
Deployment:
  - Make sure `Visual C++ 2015` is installed (`x86` or x64` depending on your build) or you package the runtime dlls with your application, see the FAQ for details.
  
What's New:
  See https://github.com/cefsharp/CefSharp/wiki/ChangeLog
  IMPORTANT NOTE - Visual C++ 2015 is now required
  IMPORTANT NOTE - .NET Framework 4.5.2 is now required.  
  IMPORTANT NOTE - Chromium has removed support for Windows XP/2003 and Windows Vista/Server 2008 (non R2).
  
  The Microsoft .NET Framework 4.5.2 Developer Pack for Visual Studio 2012 and Visual Studio 2013 is available here: 
  https://www.microsoft.com/en-gb/download/details.aspx?id=42637

Basic Troubleshooting:
  - Minimum of .Net 4.5.2
  - Make sure `VC++ 2015 Redist` is installed (either `x86` or `x64` depending on your application)
  - Please ensure your binaries directory contains these required dependencies:
    * libcef.dll (CEF code)
    * icudtl.dat (Unicode Support data)
    * CefSharp.Core.dll, CefSharp.dll, 
      CefSharp.BrowserSubprocess.exe, CefSharp.BrowserSubProcess.Core.dll
        - These are required CefSharp binaries that are the common core logic binaries of CefSharp.
    * One of the following UI presentation approaches:
        * CefSharp.WinForms.dll
        * CefSharp.Wpf.dll
        * CefSharp.OffScreen.dll
  - Additional optional CEF files are described at: https://github.com/cefsharp/cef-binary/blob/master/README.txt#L82
    NOTE: CefSharp does not currently support CEF sandboxing.
  - By default `CEF` has it's own log file, `Debug.log` which is located in your executing folder. e.g. `bin`

For further help please read the following content:
  - General Usage Guide https://github.com/cefsharp/CefSharp/wiki/General-Usage
  - Minimal Example Projects showing the browser in action (https://github.com/cefsharp/CefSharp.MinimalExample)
  - CefSharp GitHub https://github.com/cefsharp/CefSharp
  - CefSharp's Wiki on github (https://github.com/cefsharp/CefSharp/wiki)
  - FAQ: https://github.com/cefsharp/CefSharp/wiki/Frequently-asked-questions
  - Troubleshooting guide (https://github.com/cefsharp/CefSharp/wiki/Trouble-Shooting)
  - Google Groups (https://groups.google.com/forum/#!forum/cefsharp) - Historic reference only
  - CefSharp vs Cef (https://github.com/cefsharp/CefSharp/blob/master/CONTRIBUTING.md#cefsharp-vs-cef)
  - Join the active community and ask your question on Gitter Chat (https://gitter.im/cefsharp/CefSharp)
  - If you have a reproducible bug then please open an issue on `GitHub`

Please consider giving back, it's only with your help will this project to continue.

Regards,
CefSharp Team

.csproj

CONDITION="[..] AND ('$(Configuration)' == 'Debug' OR '$(Configuration)' == 'Release')"
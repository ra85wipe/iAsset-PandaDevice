/*
 * invoke.h
 *
 *  Created on: 04.02.2019
 *      Author: psota
 */

 // util::invoke
 // Taken from official std::invoke proposal http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3727.html
 // by Tomasz Kaminski, licensed under the Boost Software License - Version 1.0, see https://github.com/tomaszkam/proposals

 /*
  * Boost Software License - Version 1.0 - August 17th, 2003
  *
  * Permission is hereby granted, free of charge, to any person or organization
  * obtaining a copy of the software and accompanying documentation covered by
  * this license(the "Software") to use, reproduce, display, distribute,
  * execute, and transmit the Software, and to prepare derivative works of the
  * Software, and to permit third - parties to whom the Software is furnished to
  * do so, all subject to the following :
  *
  * The copyright notices in the Software and this entire statement, including
  * the above license grant, this restriction and the following disclaimer,
  * must be included in all copies of the Software, in whole or in part, and
  * all derivative works of the Software, unless such copies or derivative
  * works are solely in the form of machine - executable object code generated by
  * a source language processor.
  *
  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  * DEALINGS IN THE SOFTWARE.
  */

#include <functional>

#include "util.h"

namespace util {

	template<typename Functor, typename... Args>
	typename std::enable_if<
		std::is_member_pointer<typename std::decay<Functor>::type>::value,
		typename std::result_of<Functor && (Args&&...)>::type
	>::type invoke(Functor&& f, Args&&... args)
	{
		return std::mem_fn(f)(std::forward<Args>(args)...);
	}

	template<typename Functor, typename... Args>
	typename std::enable_if<
		!std::is_member_pointer<typename std::decay<Functor>::type>::value,
		typename std::result_of<Functor && (Args&&...)>::type
	>::type invoke(Functor&& f, Args&&... args)
	{
		return std::forward<Functor>(f)(std::forward<Args>(args)...);
	}

	template<typename Return, typename Functor, typename... Args>
	Return invoke(Functor&& f, Args&&... args)
	{
		return invoke(std::forward<Functor>(f), std::forward<Args>(args)...);
	}
}
